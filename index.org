#+title: A Look at Loan-to-Deposits
#+author: Matt Brigida
#+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-readtheorg.setup

I use:

#+begin_quote
"Net loans and leases to deposits","lnlsdepr","Loans and lease financing receivables net of unearned income, allowances and reserves as a percent of total deposits."
#+end_quote

as the measure of loans and leases to deposits.

#+begin_src python :exports none :session dep
import pandas as pd
import seaborn as sns
sns.set_theme(style="darkgrid")
import matplotlib.pyplot as plt
plt.style.use("dark_background")

panel = pd.read_csv('../../../1_FDIC_SDI_data/build_panel/panel_python_20220630/6_final_panel_with_mdi.csv', header=0, sep=",", low_memory=False)

panel['quarter'] = pd.to_datetime(panel['quarter'])

### overall deposits to loans-----
## "Net loans and leases to deposits","lnlsdepr","Loans and lease financing receivables net of unearned income, allowances and reserves as a percent of total deposits."

print(panel["lnlsdepr"].describe())

## only keep values between -1 and 2 (remember to remove for while panel)
loans_to_deposits_censored = panel["lnlsdepr"].where(panel["lnlsdepr"] > -100)
loans_to_deposits_censored = panel["lnlsdepr"].where(panel["lnlsdepr"] < 200)
total_distplot = sns.distplot(loans_to_deposits_censored)
plt.show()

loans_to_deposits_censored.shape

panel["censored_loans_to_dep"] = loans_to_deposits_censored
#+end_src

#+RESULTS:



#+begin_src python :exports none :session dep
## look at median and mean lnlsdepr over time (also look at firm size)

panel.columns.values
median_loans_dep = panel[["quarter", "censored_loans_to_dep", "asset"]].groupby("quarter").median()
mean_loans_dep = panel[["quarter", "censored_loans_to_dep", "asset"]].groupby("quarter").mean()

sns.relplot(x=median_loans_dep["censored_loans_to_dep"].index, y="censored_loans_to_dep", data=median_loans_dep, kind="line", )
#+end_src

#+RESULTS:
: <seaborn.axisgrid.FacetGrid object at 0x7f6ec9696a40>

#+CAPTION: Median Loans to Deposits by Quarter
[[./median_laons_to_dep.png]]

#+begin_src python :exports none :session dep
mean_loans_dep_by_quarter = sns.relplot(x=median_loans_dep["censored_loans_to_dep"].index, y="censored_loans_to_dep", data=median_loans_dep, kind="line", )
fig_mean = mean_loans_dep_by_quarter.fig
fig_mean.savefig("mean_loans_to_dep.png") 
#+end_src

#+RESULTS:
: None

#+CAPTION: Mean Loans to Deposits by Quarter
[[./mean_loans_to_dep.png]]


* Low Loan to Deposit Banks

Let's look at the banks with low LTD in 2012 and in 06302021.  Are they the same?

#+begin_src python :exports none :session dep
panel_2012 = panel[panel["quarter"] == "20120331"]
panel_low_2012 = panel_2012[panel_2012["censored_loans_to_dep"] < 72]
panel_2021 = panel[panel["quarter"] == "20210331"]
panel_low_2021 = panel_2021[panel_2021["censored_loans_to_dep"] < 72]
#+end_src

#+RESULTS:

#+begin_src python :exports none :session dep
panel_2012 = panel[panel["quarter"] == "20120331"]
panel_high_2012 = panel_2012[panel_2012["censored_loans_to_dep"] > 72]
panel_2021 = panel[panel["quarter"] == "20210331"]
panel_high_2021 = panel_2021[panel_2021["censored_loans_to_dep"] > 72]
#+end_src

#+RESULTS:


#+begin_src python :exports results :session dep
panel_low_2012["fdicdbs"].value_counts()
#+end_src

#+RESULTS:
: Kansas City      1464
: Dallas           1451
: Chicago          1115
: Atlanta           760
: New York          623
: San Francisco     496
: Name: fdicdbs, dtype: int64



#+begin_src python :exports results :session dep
panel_low_2021["fdicdbs"].value_counts()
#+end_src

#+RESULTS:
: Kansas City      1084
: Dallas           1080
: Chicago           849
: Atlanta           540
: San Francisco     368
: New York          355
: Name: fdicdbs, dtype: int64


The only difference is in the order of NY and San Francisco.

** What about MDI Status?

*** Low LTD

#+begin_src python :exports results :session dep
panel_low_2012["Minority Status_(Alpha_Code)"].value_counts() / panel_low_2012["Minority Status_(Alpha_Code)"].value_counts().sum()
#+end_src

#+RESULTS:
: A    0.346939
: B    0.292517
: H    0.224490
: N    0.122449
: M    0.013605
: Name: Minority Status_(Alpha_Code), dtype: float64

Proportion MDI vs non-MDI

#+begin_src python :exports results :session dep
panel_low_2012["Minority Status_(Alpha_Code)"].isnull().sum() / panel_low_2012["Minority Status_(Alpha_Code)"].shape[0]
#+end_src

#+RESULTS:
: 0.9751226941952953


#+begin_src python :exports results :session dep
panel_low_2021["Minority Status_(Alpha_Code)"].value_counts() / panel_low_2021["Minority Status_(Alpha_Code)"].value_counts().sum()
#+end_src

#+RESULTS:
: H    0.328767
: B    0.320548
: N    0.194521
: A    0.145205
: M    0.010959
: Name: Minority Status_(Alpha_Code), dtype: float64


#+begin_src python :exports results :session dep
panel_low_2021["Minority Status_(Alpha_Code)"].isnull().sum() / panel_low_2021["Minority Status_(Alpha_Code)"].shape[0]
#+end_src

#+RESULTS:
: 0.9146398503274088


*** High LTD

#+begin_src python :exports results :session dep
panel_high_2012["Minority Status_(Alpha_Code)"].value_counts() / panel_high_2012["Minority Status_(Alpha_Code)"].value_counts().sum()
#+end_src

#+RESULTS:
: A    0.567708
: H    0.192708
: B    0.151042
: N    0.083333
: M    0.005208
: Name: Minority Status_(Alpha_Code), dtype: float64


#+begin_src python :exports results :session dep
panel_high_2021["Minority Status_(Alpha_Code)"].value_counts() / panel_high_2021["Minority Status_(Alpha_Code)"].value_counts().sum()
#+end_src

#+RESULTS:
: A    0.667651
: H    0.177253
: N    0.100443
: B    0.054653
: Name: Minority Status_(Alpha_Code), dtype: float64


* Cross-sectional Regression

We'll use R so we can estimate robust standard errors.


#+begin_src python :exports results :session dep
panel_2012.to_csv("panel_2012.csv")
panel_2021.to_csv("panel_2021.csv")
#+end_src

#+RESULTS:
: None

#+begin_src R :exports results :session *R*
library(readr)

panel_2012 <- read_csv("./panel_2012.csv")
panel_2021 <- read_csv("./panel_2021.csv")

panel_2012$min_stat <- panel_2012$`Minority_Status_(Numeric_Code)`

#+end_src

#+RESULTS:


#+begin_src R :exports results :session *R* :results output
summary(lm(dep ~ nim + rbcrwaj + min_stat, data=panel_2012))
#+end_src

#+RESULTS:
#+begin_example
Call:
lm(formula = dep ~ nim + rbcrwaj + min_stat, data = panel_2012)

Residuals:
     Min       1Q   Median       3Q      Max 
-2165333   -57556   -19634    36205  1909191 

Coefficients:
              Estimate Std. Error t value Pr(>|t|)    
(Intercept)  1.282e+05  5.636e+04   2.276   0.0235 *  
nim          7.745e+01  5.335e-01 145.163   <2e-16 ***
rbcrwaj     -4.460e+03  2.890e+03  -1.544   0.1236    
min_stat    -1.677e+03  1.009e+04  -0.166   0.8682    
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 327900 on 335 degrees of freedom
  (11681 observations deleted due to missingness)
Multiple R-squared:  0.9871,	Adjusted R-squared:  0.987 
F-statistic:  8549 on 3 and 335 DF,  p-value: < 2.2e-16
#+end_example
